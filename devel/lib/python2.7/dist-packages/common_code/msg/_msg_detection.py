"""autogenerated by genpy from common_code/msg_detection.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class msg_detection(genpy.Message):
  _md5sum = "66d102c3c2c8a4d041610d1708a31562"
  _type = "common_code/msg_detection"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
float64 delta_x
float64 timestamp
float64[2] obj_x_y
float64 obj_orient
float64[2] robot_x_y
float64 robot_orient
int16 n_type
float64[] scores

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','delta_x','timestamp','obj_x_y','obj_orient','robot_x_y','robot_orient','n_type','scores']
  _slot_types = ['std_msgs/Header','float64','float64','float64[2]','float64','float64[2]','float64','int16','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,delta_x,timestamp,obj_x_y,obj_orient,robot_x_y,robot_orient,n_type,scores

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(msg_detection, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.delta_x is None:
        self.delta_x = 0.
      if self.timestamp is None:
        self.timestamp = 0.
      if self.obj_x_y is None:
        self.obj_x_y = [0.,0.]
      if self.obj_orient is None:
        self.obj_orient = 0.
      if self.robot_x_y is None:
        self.robot_x_y = [0.,0.]
      if self.robot_orient is None:
        self.robot_orient = 0.
      if self.n_type is None:
        self.n_type = 0
      if self.scores is None:
        self.scores = []
    else:
      self.header = std_msgs.msg.Header()
      self.delta_x = 0.
      self.timestamp = 0.
      self.obj_x_y = [0.,0.]
      self.obj_orient = 0.
      self.robot_x_y = [0.,0.]
      self.robot_orient = 0.
      self.n_type = 0
      self.scores = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2d.pack(_x.delta_x, _x.timestamp))
      buff.write(_struct_2d.pack(*self.obj_x_y))
      buff.write(_struct_d.pack(self.obj_orient))
      buff.write(_struct_2d.pack(*self.robot_x_y))
      _x = self
      buff.write(_struct_dh.pack(_x.robot_orient, _x.n_type))
      length = len(self.scores)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.scores))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.delta_x, _x.timestamp,) = _struct_2d.unpack(str[start:end])
      start = end
      end += 16
      self.obj_x_y = _struct_2d.unpack(str[start:end])
      start = end
      end += 8
      (self.obj_orient,) = _struct_d.unpack(str[start:end])
      start = end
      end += 16
      self.robot_x_y = _struct_2d.unpack(str[start:end])
      _x = self
      start = end
      end += 10
      (_x.robot_orient, _x.n_type,) = _struct_dh.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.scores = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2d.pack(_x.delta_x, _x.timestamp))
      buff.write(self.obj_x_y.tostring())
      buff.write(_struct_d.pack(self.obj_orient))
      buff.write(self.robot_x_y.tostring())
      _x = self
      buff.write(_struct_dh.pack(_x.robot_orient, _x.n_type))
      length = len(self.scores)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.scores.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.delta_x, _x.timestamp,) = _struct_2d.unpack(str[start:end])
      start = end
      end += 16
      self.obj_x_y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      start = end
      end += 8
      (self.obj_orient,) = _struct_d.unpack(str[start:end])
      start = end
      end += 16
      self.robot_x_y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      _x = self
      start = end
      end += 10
      (_x.robot_orient, _x.n_type,) = _struct_dh.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.scores = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
_struct_3I = struct.Struct("<3I")
_struct_d = struct.Struct("<d")
_struct_dh = struct.Struct("<dh")
