// Generated by gencpp from file common_code/msg_detection.msg
// DO NOT EDIT!


#ifndef COMMON_CODE_MESSAGE_MSG_DETECTION_H
#define COMMON_CODE_MESSAGE_MSG_DETECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace common_code
{
template <class ContainerAllocator>
struct msg_detection_
{
  typedef msg_detection_<ContainerAllocator> Type;

  msg_detection_()
    : header()
    , delta_x(0.0)
    , timestamp(0.0)
    , obj_x_y()
    , obj_orient(0.0)
    , robot_x_y()
    , robot_orient(0.0)
    , pan_orient(0.0)
    , n_type(0)
    , scores()
    , det_score(0.0)  {
      obj_x_y.assign(0.0);

      robot_x_y.assign(0.0);
  }
  msg_detection_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , delta_x(0.0)
    , timestamp(0.0)
    , obj_x_y()
    , obj_orient(0.0)
    , robot_x_y()
    , robot_orient(0.0)
    , pan_orient(0.0)
    , n_type(0)
    , scores(_alloc)
    , det_score(0.0)  {
      obj_x_y.assign(0.0);

      robot_x_y.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _delta_x_type;
  _delta_x_type delta_x;

   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef boost::array<double, 2>  _obj_x_y_type;
  _obj_x_y_type obj_x_y;

   typedef double _obj_orient_type;
  _obj_orient_type obj_orient;

   typedef boost::array<double, 2>  _robot_x_y_type;
  _robot_x_y_type robot_x_y;

   typedef double _robot_orient_type;
  _robot_orient_type robot_orient;

   typedef double _pan_orient_type;
  _pan_orient_type pan_orient;

   typedef int16_t _n_type_type;
  _n_type_type n_type;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _scores_type;
  _scores_type scores;

   typedef double _det_score_type;
  _det_score_type det_score;




  typedef boost::shared_ptr< ::common_code::msg_detection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_code::msg_detection_<ContainerAllocator> const> ConstPtr;

}; // struct msg_detection_

typedef ::common_code::msg_detection_<std::allocator<void> > msg_detection;

typedef boost::shared_ptr< ::common_code::msg_detection > msg_detectionPtr;
typedef boost::shared_ptr< ::common_code::msg_detection const> msg_detectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_code::msg_detection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_code::msg_detection_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace common_code

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'common_code': ['/home/champion/catkin_ws/src/dynamic_ptp_catkin/src/common_code/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::common_code::msg_detection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_code::msg_detection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_code::msg_detection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_code::msg_detection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_code::msg_detection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_code::msg_detection_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_code::msg_detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "31755591cda67b5d07259fb33c656b42";
  }

  static const char* value(const ::common_code::msg_detection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x31755591cda67b5dULL;
  static const uint64_t static_value2 = 0x07259fb33c656b42ULL;
};

template<class ContainerAllocator>
struct DataType< ::common_code::msg_detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_code/msg_detection";
  }

  static const char* value(const ::common_code::msg_detection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_code::msg_detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float64 delta_x\n\
float64 timestamp\n\
float64[2] obj_x_y\n\
float64 obj_orient\n\
float64[2] robot_x_y\n\
float64 robot_orient\n\
float64 pan_orient\n\
int16 n_type\n\
float64[] scores\n\
float64 det_score\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::common_code::msg_detection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_code::msg_detection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.delta_x);
      stream.next(m.timestamp);
      stream.next(m.obj_x_y);
      stream.next(m.obj_orient);
      stream.next(m.robot_x_y);
      stream.next(m.robot_orient);
      stream.next(m.pan_orient);
      stream.next(m.n_type);
      stream.next(m.scores);
      stream.next(m.det_score);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct msg_detection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_code::msg_detection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_code::msg_detection_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "delta_x: ";
    Printer<double>::stream(s, indent + "  ", v.delta_x);
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "obj_x_y[]" << std::endl;
    for (size_t i = 0; i < v.obj_x_y.size(); ++i)
    {
      s << indent << "  obj_x_y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.obj_x_y[i]);
    }
    s << indent << "obj_orient: ";
    Printer<double>::stream(s, indent + "  ", v.obj_orient);
    s << indent << "robot_x_y[]" << std::endl;
    for (size_t i = 0; i < v.robot_x_y.size(); ++i)
    {
      s << indent << "  robot_x_y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.robot_x_y[i]);
    }
    s << indent << "robot_orient: ";
    Printer<double>::stream(s, indent + "  ", v.robot_orient);
    s << indent << "pan_orient: ";
    Printer<double>::stream(s, indent + "  ", v.pan_orient);
    s << indent << "n_type: ";
    Printer<int16_t>::stream(s, indent + "  ", v.n_type);
    s << indent << "scores[]" << std::endl;
    for (size_t i = 0; i < v.scores.size(); ++i)
    {
      s << indent << "  scores[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.scores[i]);
    }
    s << indent << "det_score: ";
    Printer<double>::stream(s, indent + "  ", v.det_score);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_CODE_MESSAGE_MSG_DETECTION_H
