// Generated by gencpp from file il_map_tools/Pan_tiltResponse.msg
// DO NOT EDIT!


#ifndef IL_MAP_TOOLS_MESSAGE_PAN_TILTRESPONSE_H
#define IL_MAP_TOOLS_MESSAGE_PAN_TILTRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace il_map_tools
{
template <class ContainerAllocator>
struct Pan_tiltResponse_
{
  typedef Pan_tiltResponse_<ContainerAllocator> Type;

  Pan_tiltResponse_()
    : angles()  {
      angles.assign(0.0);
  }
  Pan_tiltResponse_(const ContainerAllocator& _alloc)
    : angles()  {
      angles.assign(0.0);
  }



   typedef boost::array<double, 2>  _angles_type;
  _angles_type angles;




  typedef boost::shared_ptr< ::il_map_tools::Pan_tiltResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::il_map_tools::Pan_tiltResponse_<ContainerAllocator> const> ConstPtr;

}; // struct Pan_tiltResponse_

typedef ::il_map_tools::Pan_tiltResponse_<std::allocator<void> > Pan_tiltResponse;

typedef boost::shared_ptr< ::il_map_tools::Pan_tiltResponse > Pan_tiltResponsePtr;
typedef boost::shared_ptr< ::il_map_tools::Pan_tiltResponse const> Pan_tiltResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::il_map_tools::Pan_tiltResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::il_map_tools::Pan_tiltResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace il_map_tools

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::il_map_tools::Pan_tiltResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::il_map_tools::Pan_tiltResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::il_map_tools::Pan_tiltResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::il_map_tools::Pan_tiltResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::il_map_tools::Pan_tiltResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::il_map_tools::Pan_tiltResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::il_map_tools::Pan_tiltResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8758be18bed045a5f20b257314365f33";
  }

  static const char* value(const ::il_map_tools::Pan_tiltResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8758be18bed045a5ULL;
  static const uint64_t static_value2 = 0xf20b257314365f33ULL;
};

template<class ContainerAllocator>
struct DataType< ::il_map_tools::Pan_tiltResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "il_map_tools/Pan_tiltResponse";
  }

  static const char* value(const ::il_map_tools::Pan_tiltResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::il_map_tools::Pan_tiltResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[2] angles\n\
\n\
";
  }

  static const char* value(const ::il_map_tools::Pan_tiltResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::il_map_tools::Pan_tiltResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Pan_tiltResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::il_map_tools::Pan_tiltResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::il_map_tools::Pan_tiltResponse_<ContainerAllocator>& v)
  {
    s << indent << "angles[]" << std::endl;
    for (size_t i = 0; i < v.angles.size(); ++i)
    {
      s << indent << "  angles[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.angles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IL_MAP_TOOLS_MESSAGE_PAN_TILTRESPONSE_H
